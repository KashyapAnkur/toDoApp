{"version":3,"sources":["practice/todoPracticeLS.jsx","serviceWorker.js","index.js"],"names":["TodoPracLS","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","insert","e","val","target","value","newArrayCount","replace","newMatchedArray","i","originalList","length","j","substr","setState","list","state","cls","console","log","keyCode","push","localStorage","setItem","JSON","stringify","remove","index","newArr","toConsumableArray","splice","getItem","document","querySelectorAll","forEach","el","checked","checkVal","parse","_this2","react_default","a","createElement","Fragment","type","placeholder","className","maxLength","onKeyUp","map","data","key","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","todoPracticeLS","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6ff446f3.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Style from './Style.css';\n\n\nclass TodoPracLS extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            list:[],\n            cls:0\n        };\n        this.originalList = []\n    }\n\n    componentWillMount(){\n        let checkVal = localStorage.getItem('data');\n        if (checkVal){\n            this.originalList = checkVal.length > 0 ? JSON.parse(checkVal) : [];\n        }\n        \n        this.setState({\n            list:this.originalList\n        });\n    }\n\n    insert = (e) => {\n        let val = e.target.value;\n        let newArrayCount = 0;\n\n        e.target.value = val.replace(/[^0-9a-zA-Z\\. !@#$%^&*()_+=-{}[]\":;'?><,.\\/]/g,''); // removes space\n        //search\n\n        this.newMatchedArray = [];\n        for (let i=0;i<this.originalList.length;i++){\n            for (let j=0;j<this.originalList[i].length;j++){\n                if (this.originalList[i].substr(j,val.length) === val){\n                    this.newMatchedArray[newArrayCount] = this.originalList[i];\n                }\n            }\n            newArrayCount++;\n        }\n\n        if (val.length > 0){\n            this.setState({\n                list:this.newMatchedArray\n            });\n            if(this.state.cls == 0){\n                this.state.cls = 1;\n            } else {\n                this.state.cls = 0;\n            }\n            console.log(this.state.cls);\n\n        } else {\n            this.setState({\n                list:this.originalList // original array\n            });\n        }\n        //search\n    \n        //insert\n        if (e.keyCode === 13 && val.length > 0){ // if enter pressed then data will be saved\n            this.setState({\n                list:this.originalList\n            });\n            e.target.value = '';\n            this.originalList.push(val);\n            localStorage.setItem('data',JSON.stringify(this.originalList));\n        }\n        //insert\n    }\n\n    remove = (index) => {\n        let newArr = [...this.state.list];\n        newArr.splice(index,1);\n        this.setState({\n            list:newArr\n        });\n        this.originalList.splice(index,1);\n        if (localStorage.getItem('data').length < 1 ){\n            localStorage.setItem('data','');\n        } else {\n            localStorage.setItem('data',JSON.stringify(newArr));\n        }\n        document.querySelectorAll('input[type=checkbox]').forEach( el => el.checked = false );\n    }\n\n    render(){\n        return (\n            <React.Fragment>\n                <center><h1>To Do List </h1><br />\n                <input type='text' placeholder=\"Enter todo\" className=\"input\" maxLength=\"20\" onKeyUp={this.insert}/>\n                <ul>{this.state.list.map((data,index) => <li key={'key' + index}>{data}<input className=\"delete\" type='button' onClick={() => this.remove(index)}/></li>)}</ul>\n                </center>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default TodoPracLS;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\n// import Timer from './practice/timer.jsx';\nimport TodoPracLS from './practice/todoPracticeLS.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<TodoPracLS />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}